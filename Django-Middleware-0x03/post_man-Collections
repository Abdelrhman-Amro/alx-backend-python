{
	"info": {
		"_postman_id": "e65a0380-ea0a-46a2-8c5c-12daf18579ad",
		"name": "Messaging_App",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39213662"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - refresh and access\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('refresh');",
									"    pm.expect(responseData).to.have.property('access');",
									"});",
									"",
									"",
									"pm.test(\"Refresh token is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.refresh).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Refresh token should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Access token is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.access).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Access token should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "magdy@test.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "testgg44",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}auth/token/",
							"host": [
								"{{host}}auth"
							],
							"path": [
								"token",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "refresh_token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 401\", function () {",
									"  pm.expect(pm.response.code).to.equal(401);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - detail and code\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.detail).to.exist;",
									"    pm.expect(responseData.code).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Detail is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.detail).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Detail should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Code is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.code).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Code should be a non-empty string\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzM5MzkyMTk3LCJpYXQiOjE3MzkzOTEyOTcsImp0aSI6ImViZDYyYWQ0ZTFiNTRhMjg5YTc3NGUwN2ZmOGE1NDc0IiwidXNlcl9pZCI6Ijk0NzNiNDRkLTA2MTgtNDQxNi05NTJkLWFlOGJiMTUzNjQ1NiJ9.b5crjDQr-0oGDNEnDfVz2CWvHmGZ8m58KswlOlPnNww",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refresh\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTc0MDEwMjA2NCwiaWF0IjoxNzM5NDk3MjY0LCJqdGkiOiI2ZDM3YTZhNzNhMzI0YzU4YWM1MTVjNDMwNDNjZjI4YyIsInVzZXJfaWQiOiI1OGRhYzQ0Zi05OTY5LTQ1ZjgtOTQxYi01ZTdhODI3MWQwNWEifQ.L6Kc493M_9O17G1d_4hVvl38bWdj7ex_JB1uc117JX0\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}auth/refresh_token/",
							"host": [
								"{{host}}auth"
							],
							"path": [
								"refresh_token",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "blacklist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 405\", function () {",
									"    pm.expect(pm.response.code).to.equal(405);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response has the required field 'detail'\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.detail).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Ensure that the detail field is not empty\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.detail).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Response body is a valid JSON format\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('object');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}auth/blacklist/",
							"host": [
								"{{host}}auth"
							],
							"path": [
								"blacklist",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "create_new_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required Content-Type header with value 'application/json'\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Username field is an empty array\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.username).to.be.an('array').that.is.empty;",
									"});",
									"",
									"",
									"pm.test(\"Email field should be an empty array\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.email).to.be.an('array').that.is.empty;",
									"});",
									"",
									"",
									"pm.test(\"Response contains expected error message for empty username and email\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.username).to.be.an('array').that.is.not.empty;",
									"  pm.expect(responseData.email).to.be.an('array').that.is.not.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"magdy\",\r\n    \"email\": \"magdy@test.com\",\r\n    \"password\": \"testgg44\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}api/register/",
							"host": [
								"{{host}}api"
							],
							"path": [
								"register",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "get_user_data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 401\", function () {",
									"    pm.expect(pm.response.code).to.equal(401);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - detail, code, and messages\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.detail).to.exist;",
									"    pm.expect(responseData.code).to.exist;",
									"    pm.expect(responseData.messages).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Messages array is present and contains expected number of elements\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.messages).to.exist.and.to.be.an('array');",
									"    pm.expect(responseData.messages).to.have.lengthOf.at.least(1, \"Messages array should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Token class, token type, and message in messages array are non-empty strings\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.messages).to.be.an('array');",
									"",
									"    responseData.messages.forEach(function (message) {",
									"        pm.expect(message.token_class).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token class should not be empty\");",
									"        pm.expect(message.token_type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token type should not be empty\");",
									"        pm.expect(message.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzM5ODg5OTA4LCJpYXQiOjE3Mzk4ODkwMDgsImp0aSI6Ijk5OTZlNDcxNjVhMjQ5MTk4Zjk1Mjg3NzRlNThjMTVkIiwidXNlcl9pZCI6IjU4ZGFjNDRmLTk5NjktNDVmOC05NDFiLTVlN2E4MjcxZDA1YSJ9.cZJwUSzbnrKIbFlFkPc1F8gpR4PM3KlhCBX13CpU2Jo",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}api/user/",
							"host": [
								"{{host}}api"
							],
							"path": [
								"user",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "update_user_data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 401\", function () {",
									"    pm.expect(pm.response.code).to.equal(401);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - detail, code, and messages\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.detail).to.exist;",
									"    pm.expect(responseData.code).to.exist;",
									"    pm.expect(responseData.messages).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Token type should not be empty\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.messages).to.be.an('array');",
									"  responseData.messages.forEach(function(message) {",
									"    pm.expect(message.token_type).to.not.be.empty;",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Token class is not empty\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.messages).to.be.an('array');",
									"  ",
									"  responseData.messages.forEach(function(message) {",
									"    pm.expect(message.token_class).to.not.be.empty;",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.messages).to.be.an('array');",
									"    responseData.messages.forEach(function(message) {",
									"        pm.expect(message.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzM5NDk3OTU4LCJpYXQiOjE3Mzk0OTcwNTgsImp0aSI6ImI4NDAxMDYwMzE0NzQxNzBhZjlkZDFjMWE3YmE2N2Q1IiwidXNlcl9pZCI6ImI1NGY2ZjkxLWEyZDEtNGFhYy1hOTA2LTdjYmQxZjBiZGQ3ZCJ9.HK3sUBEyIxkwsOff-9o0gmBi1R_1U572DfPtYP6hyuk",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user_id\": \"58dac44f-9969-45f8-941b-5e7a8271d05a\",\r\n    \"username\": \"magdy\",\r\n    \"email\": \"magdy@test.com\",\r\n    \"password\": \"pbkdf2_sha256$870000$evqhgP5inyqMSuMqv6jkIt$lsoPPpALtt6dDSlqNpxf9KdZND1M0asUj4FnVsCM47E=\",\r\n    \"first_name\": \"\",\r\n    \"last_name\": \"\",\r\n    \"full_name\": \" \",\r\n    \"phone_number\": \"\",\r\n    \"role\": \"guest\",\r\n    \"created_at\": \"2025-02-14T01:37:35.416078Z\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}api/user/",
							"host": [
								"{{host}}api"
							],
							"path": [
								"user",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "delete_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 401\", function () {",
									"    pm.expect(pm.response.code).to.equal(401);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - detail, code, and messages\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.detail).to.exist;",
									"    pm.expect(responseData.code).to.exist;",
									"    pm.expect(responseData.messages).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Messages array is present and contains expected number of elements\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.messages).to.exist.and.to.be.an('array');",
									"    pm.expect(responseData.messages).to.have.lengthOf(1);",
									"});",
									"",
									"",
									"pm.test(\"Token class, token type, and message in messages array are non-empty strings\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.messages).to.be.an('array');",
									"    ",
									"    responseData.messages.forEach(function(message) {",
									"        pm.expect(message.token_class).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token class should not be empty\");",
									"        pm.expect(message.token_type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token type should not be empty\");",
									"        pm.expect(message.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzM5NDk1NTEzLCJpYXQiOjE3Mzk0OTQ2MTMsImp0aSI6IjZjNTg4ZTczZDM4ZTQyYjI4ZTFjNDhmYzEzN2VmM2NjIiwidXNlcl9pZCI6IjZmOGJiNWNlLTU5YmUtNDg1ZS1hYzU3LTc4YTU0NzJmZTA4YyJ9.Sf8cnY5TkikI9DfR3pkckkHn84zgjSWboYjAjqi0_cY",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}api/user/",
							"host": [
								"{{host}}api"
							],
							"path": [
								"user",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Conversations",
			"item": [
				{
					"name": "create_conversations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 401\", function () {",
									"  pm.expect(pm.response.code).to.equal(401);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.detail).to.exist;",
									"    pm.expect(responseData.code).to.exist;",
									"    pm.expect(responseData.messages).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Token_class, token_type, and message in messages are non-empty strings\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.messages).to.be.an('array');",
									"  ",
									"  responseData.messages.forEach(function(message) {",
									"    pm.expect(message.token_class).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"    pm.expect(message.token_type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"    pm.expect(message.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Messages array is present and contains the expected number of elements\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.messages).to.exist.and.to.be.an('array');",
									"  pm.expect(responseData.messages).to.have.lengthOf(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzM5NTgyODg5LCJpYXQiOjE3Mzk1ODE5ODksImp0aSI6ImUyMWI2ZDU5MmJkOTQzNWU5NzkzZTg0NGRmM2VmOTczIiwidXNlcl9pZCI6IjU4ZGFjNDRmLTk5NjktNDVmOC05NDFiLTVlN2E4MjcxZDA1YSJ9.s1K_loenW6OozvjjuIUBqgVc5lJ9a7zOKCmdlhWTSTo",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"participants\": [\"b54f6f91-a2d1-4aac-a906-7cbd1f0bdd7d\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}api/conversations/",
							"host": [
								"{{host}}api"
							],
							"path": [
								"conversations",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "get_conversations_user_participated_in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 401\", function () {",
									"  pm.expect(pm.response.code).to.equal(401);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - detail, code, and messages\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.detail).to.exist;",
									"  pm.expect(responseData.code).to.exist;",
									"  pm.expect(responseData.messages).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Messages array is present and contains expected number of elements\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.messages).to.exist.and.to.be.an('array');",
									"    pm.expect(responseData.messages).to.have.lengthOf.at.least(1, \"Messages array should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Token class, token type, and message are non-empty strings\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.messages).to.be.an('array');",
									"  ",
									"  responseData.messages.forEach(function(message) {",
									"    pm.expect(message.token_class).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token class should not be empty\");",
									"    pm.expect(message.token_type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token type should not be empty\");",
									"    pm.expect(message.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"  });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzM5ODg5OTA4LCJpYXQiOjE3Mzk4ODkwMDgsImp0aSI6Ijk5OTZlNDcxNjVhMjQ5MTk4Zjk1Mjg3NzRlNThjMTVkIiwidXNlcl9pZCI6IjU4ZGFjNDRmLTk5NjktNDVmOC05NDFiLTVlN2E4MjcxZDA1YSJ9.cZJwUSzbnrKIbFlFkPc1F8gpR4PM3KlhCBX13CpU2Jo",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}api/conversations/",
							"host": [
								"{{host}}api"
							],
							"path": [
								"conversations",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "update_user_conversation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 401\", function () {",
									"  pm.expect(pm.response.code).to.equal(401);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - detail, code, and messages\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.detail).to.exist;",
									"    pm.expect(responseData.code).to.exist;",
									"    pm.expect(responseData.messages).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Token type should not be empty\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.messages[0].token_type).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Messages array is present and contains expected number of elements\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.messages).to.exist.and.to.be.an('array').with.lengthOf(1);",
									"});",
									"",
									"",
									"pm.test(\"Token class is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    responseData.messages.forEach(function(message) {",
									"        pm.expect(message.token_class).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token class should not be empty\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzM5ODkyOTUxLCJpYXQiOjE3Mzk4OTIwNTEsImp0aSI6IjUxMjU3ZmRiZjUyZTRiODc4ODQwNmU2OWNlMzc0NGNhIiwidXNlcl9pZCI6ImI1NGY2ZjkxLWEyZDEtNGFhYy1hOTA2LTdjYmQxZjBiZGQ3ZCJ9.er9CrDQDlpXeLi7fmid12npZQaMo475uao7snIXdBHA",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n    \"participants\": [\r\n        \"58dac44f-9969-45f8-941b-5e7a8271d05a\",\"b54f6f91-a2d1-4aac-a906-7cbd1f0bdd7d\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}api/conversations/0ad2e252-e9fd-4121-9e43-c145a17f1a30/",
							"host": [
								"{{host}}api"
							],
							"path": [
								"conversations",
								"0ad2e252-e9fd-4121-9e43-c145a17f1a30",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "delete_user_conversation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 401\", function () {",
									"    pm.expect(pm.response.code).to.equal(401);",
									"});",
									"",
									"",
									"pm.test(\"Content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.have.property('detail');",
									"    pm.expect(responseData).to.have.property('code');",
									"    pm.expect(responseData).to.have.property('messages');",
									"});",
									"",
									"",
									"pm.test(\"Token type is present and in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.messages).to.be.an('array');",
									"    ",
									"    responseData.messages.forEach(function(message) {",
									"        pm.expect(message).to.have.property('token_type').that.is.a('string').and.not.empty;",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Messages array is present and contains expected number of elements\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.messages).to.be.an('array');",
									"    pm.expect(responseData.messages).to.have.lengthOf(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzM5NTc2MzIzLCJpYXQiOjE3Mzk1NzU0MjMsImp0aSI6IjhiNTczNTkyNTg2YjRjMGY4OTJkNGJiNjBkNDhhMjk1IiwidXNlcl9pZCI6ImI1NGY2ZjkxLWEyZDEtNGFhYy1hOTA2LTdjYmQxZjBiZGQ3ZCJ9.RCPJoihMxQUoEKoMqxzYHOSYjPHTX23Mq4SrQqZ_dlU",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}api/conversations/0e4aeaf5-32a3-477d-a366-da50c82307b4/",
							"host": [
								"{{host}}api"
							],
							"path": [
								"conversations",
								"0e4aeaf5-32a3-477d-a366-da50c82307b4",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Messages",
			"item": [
				{
					"name": "create_message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 401\", function () {",
									"  pm.expect(pm.response.code).to.equal(401);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - detail, code, and messages\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('detail');",
									"    pm.expect(responseData).to.have.property('code');",
									"    pm.expect(responseData).to.have.property('messages');",
									"});",
									"",
									"",
									"pm.test(\"Token class and token type in messages are non-empty strings\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.messages).to.be.an('array');",
									"  responseData.messages.forEach(function(message) {",
									"    pm.expect(message.token_class).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token class should not be empty\");",
									"    pm.expect(message.token_type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token type should not be empty\");",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Verify that the token type is of a valid type\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  responseData.messages.forEach(function(message) {",
									"    pm.expect(message.token_type).to.be.oneOf(['bearer', 'jwt', 'basic']);",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    responseData.messages.forEach(function(message) {",
									"        pm.expect(message.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzM5NTg1NDU4LCJpYXQiOjE3Mzk1ODQ1NTgsImp0aSI6IjA5NDI3YWNjZGVmMTQ5ZDQ4YzIyMTQ5MTYzNjdiZDEyIiwidXNlcl9pZCI6IjU4ZGFjNDRmLTk5NjktNDVmOC05NDFiLTVlN2E4MjcxZDA1YSJ9.b7ajvbcR4ZLS8022l4oiv18JLebinSrUN_-X2uS7muQ",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"message_body\": \"Hello I am magdaaaaaaaaaaaaaay and this is my conversation\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}api/conversations/0ad2e252-e9fd-4121-9e43-c145a17f1a30/messages/",
							"host": [
								"{{host}}api"
							],
							"path": [
								"conversations",
								"0ad2e252-e9fd-4121-9e43-c145a17f1a30",
								"messages",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "get_conversation_messages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 401\", function () {",
									"    pm.expect(pm.response.code).to.equal(401);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - detail, code, and messages\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.detail).to.exist;",
									"  pm.expect(responseData.code).to.exist;",
									"  pm.expect(responseData.messages).to.exist.and.to.be.an('array');",
									"});",
									"",
									"",
									"pm.test(\"Token type is not empty\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.messages).to.be.an('array');",
									"  responseData.messages.forEach(function(message) {",
									"    pm.expect(message.token_type).to.not.be.empty;",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Messages array is present and contains expected number of elements\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.messages).to.exist.and.to.be.an('array');",
									"    pm.expect(responseData.messages).to.have.lengthOf(3);",
									"});",
									"",
									"",
									"pm.test(\"Token class is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    responseData.messages.forEach(function(message) {",
									"        pm.expect(message.token_class).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token class should be a non-empty string\");",
									"    });",
									"});",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    responseData.messages.forEach(function(message) {",
									"        pm.expect(message.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should be a non-empty string\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzQwMTg5MDE5LCJpYXQiOjE3NDAxODgxMTksImp0aSI6ImI1MjZmOWE4OTZjODRlZTg4ZmExMDYxZTZjZWJlOWUwIiwidXNlcl9pZCI6IjU4ZGFjNDRmLTk5NjktNDVmOC05NDFiLTVlN2E4MjcxZDA1YSJ9.l_YK0_YhgTzQ8BmQ9N85JLXqiNWkCe9SmjhpWeasuxU",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}api/conversations/0ad2e252-e9fd-4121-9e43-c145a17f1a30/messages/",
							"host": [
								"{{host}}api"
							],
							"path": [
								"conversations",
								"0ad2e252-e9fd-4121-9e43-c145a17f1a30",
								"messages",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "get_paginated_conversation_messages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 401\", function () {",
									"  pm.expect(pm.response.code).to.equal(401);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.detail).to.exist;",
									"    pm.expect(responseData.code).to.exist;",
									"    pm.expect(responseData.messages).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Token type is not empty\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  responseData.messages.forEach(function(message) {",
									"    pm.expect(message.token_type).to.not.be.empty;",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  responseData.messages.forEach(function(message) {",
									"    pm.expect(message.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzQwMTg1Nzc2LCJpYXQiOjE3NDAxODQ4NzYsImp0aSI6IjM0NGQ2ZTljNzg0MTQwOGY5YzIzYzc5MDdmYmYwOGZjIiwidXNlcl9pZCI6IjU4ZGFjNDRmLTk5NjktNDVmOC05NDFiLTVlN2E4MjcxZDA1YSJ9.PN3k2Bn90goHu0j_7sP4_ZZkjiVnDaomDOM31BnNv3I",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}api/conversations/0ad2e252-e9fd-4121-9e43-c145a17f1a30/messages/?PG=1&PGSZ=2",
							"host": [
								"{{host}}api"
							],
							"path": [
								"conversations",
								"0ad2e252-e9fd-4121-9e43-c145a17f1a30",
								"messages",
								""
							],
							"query": [
								{
									"key": "PG",
									"value": "1"
								},
								{
									"key": "PGSZ",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_filtered_conversation_messages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('count');",
									"    pm.expect(responseData).to.have.property('next');",
									"    pm.expect(responseData).to.have.property('previous');",
									"    pm.expect(responseData).to.have.property('results');",
									"});",
									"",
									"",
									"pm.test(\"Sent_at field in results is in a valid date-time format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.results).to.be.an('array');",
									"    responseData.results.forEach(function(result) {",
									"        pm.expect(result.sent_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{6}Z$/);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Results array is present and contains the expected number of elements\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.results).to.exist.and.to.be.an('array');",
									"    pm.expect(responseData.results).to.have.lengthOf(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzQwMjAwMDc1LCJpYXQiOjE3NDAxOTkxNzUsImp0aSI6IjdhMjYwYjJiNTRhZjQ1NjY4OWNhZGI0ZmY2NTE0YTlmIiwidXNlcl9pZCI6IjU4ZGFjNDRmLTk5NjktNDVmOC05NDFiLTVlN2E4MjcxZDA1YSJ9.n7LP_0S8ZYUBsfShufwXVA5Cc9Ntwb05B4jHznsAGZ0",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}api/conversations/0ad2e252-e9fd-4121-9e43-c145a17f1a30/messages/?sender__username=Ahmed&start_sent_date=2025-02-22T01:58:27.589968Z&end_sent_date=2025-02-22T04:41:11.675269Z",
							"host": [
								"{{host}}api"
							],
							"path": [
								"conversations",
								"0ad2e252-e9fd-4121-9e43-c145a17f1a30",
								"messages",
								""
							],
							"query": [
								{
									"key": "sender__username",
									"value": "Ahmed"
								},
								{
									"key": "start_sent_date",
									"value": "2025-02-22T01:58:27.589968Z"
								},
								{
									"key": "end_sent_date",
									"value": "2025-02-22T04:41:11.675269Z"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "update_user_message",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzM5NTg3MzU0LCJpYXQiOjE3Mzk1ODY0NTQsImp0aSI6IjIyNzNkNDIzMGRjYTRlNWE5NjI4OGZiODAwMmJmOTc0IiwidXNlcl9pZCI6IjU4ZGFjNDRmLTk5NjktNDVmOC05NDFiLTVlN2E4MjcxZDA1YSJ9.91dmpLofZMvBwmB-G6wYOm6jv7vftD1ESUsuyAUXo24",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"message_body\": \"Now you couldn't\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}api/conversations/0ad2e252-e9fd-4121-9e43-c145a17f1a30/messages/37098a03-0d59-4825-839a-ba2c79a26c28/",
							"host": [
								"{{host}}api"
							],
							"path": [
								"conversations",
								"0ad2e252-e9fd-4121-9e43-c145a17f1a30",
								"messages",
								"37098a03-0d59-4825-839a-ba2c79a26c28",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "delete_user_message",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzM5NTg3MzU0LCJpYXQiOjE3Mzk1ODY0NTQsImp0aSI6IjIyNzNkNDIzMGRjYTRlNWE5NjI4OGZiODAwMmJmOTc0IiwidXNlcl9pZCI6IjU4ZGFjNDRmLTk5NjktNDVmOC05NDFiLTVlN2E4MjcxZDA1YSJ9.91dmpLofZMvBwmB-G6wYOm6jv7vftD1ESUsuyAUXo24",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}api/conversations/0ad2e252-e9fd-4121-9e43-c145a17f1a30/messages/40982e0f-c243-424e-9533-d6304a0b7580/",
							"host": [
								"{{host}}api"
							],
							"path": [
								"conversations",
								"0ad2e252-e9fd-4121-9e43-c145a17f1a30",
								"messages",
								"40982e0f-c243-424e-9533-d6304a0b7580",
								""
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "http://127.0.0.1:8000/",
			"type": "string"
		}
	]
}
